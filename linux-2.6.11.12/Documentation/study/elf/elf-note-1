
1. Section
   一般目标文件将这些信息按照不同的属性，以“节”(Section)的形式存储;也就是节,是一个长度的区域，里面有相同属性的信息。
   实例程序:
  int global_init_var = 84;
  int global_uninit_var;
  void func1( int i) {
	printf("%d\n",i);
  }
  int main(void) {
	static int static_var = 85;
	static int static_var2;
	int a = 1;
    int b;
	func1( static_var + static_var2 + a + b);
	return a;
  }
1.1 BSS Section
 .bss段存放的是未初始化的全局变量和未初始化的局部静态变量。
 objdump -x -s -d simpleSection打印信息如下:
 22 .bss          0000000c
 08049594 l     O .bss   00000004              static_var2.1785
 08049598 g     O .bss   00000004              global_uninit_var
 08049590 l     O .bss   00000001              completed.5761
 可以看出.bss存放的是全局未初始化的global_uninit_var和未初始化的局部静态变量static_var2,还有completed变量大小为1个字节，
 对齐后，则一共是12个字节。
 global_uninit_var和static_var2是simpleSection.c中的，completed可能是库文件中的。

1.2 代码段
   代码段名叫: .text
  通过objdump -s选项，可以看到.text段包括 main和func1函数。
1.3 数据段
   数据段名叫: .data
   .data包含初始化的全局变量和初始化的局部静态变量。

   .data描述表:
   21 .data         00000014  0804957c  0804957c  0000057c  2**2

   .data的内容：
   804957c 00000000 00000000 90940408 54000000  ............T...
   804958c 55000000                             U...
   说明：0x804957c和0x804958c是地址。

   .data包含变量：
   0804958c l     O .data  00000004              static_var.1784
   08049588 g     O .data  00000004              global_init_var

   data大小是0x14=20个字节，从内容看到5个字节，最后两个是0x54=84和0x55=85。

1.4 只读数据段
   数据段名叫: .rodata
   .rodata段存放的是只读数据，一般是程序里面的只读变量(如const修饰的变量)和字符串常量。
   示例程序在调用"printf"的时候，用到了一个字符串常量"%d\n"，它是一种只读数据，所以它被放到".rodata"段。

   .rodata的内容：
   Contents of section .rodata:
   8048474 03000000 01000200 25640a00           ........%d..

2. ELF文件头:
    
    ELF的文件头中定义了ELF魔数、文件机器字节长度、数据存储方式、版本、运行平台、ABI版本、ELF重定位类型、
	硬件平台、硬件平台版本、入口地址、程序头入口和长度、段表的位置和长度以及段的数量。

	ELF文件头的定义如下：
	typedef struct elf32_hdr{
		unsigned char	e_ident[EI_NIDENT];
		Elf32_Half	e_type;
		Elf32_Half	e_machine;
		Elf32_Word	e_version;
		Elf32_Addr	e_entry;  /* Entry point */
		Elf32_Off	e_phoff;
		Elf32_Off	e_shoff;
		Elf32_Word	e_flags;
		Elf32_Half	e_ehsize;
		Elf32_Half	e_phentsize;
		Elf32_Half	e_phnum;
		Elf32_Half	e_shentsize;
		Elf32_Half	e_shnum;
		Elf32_Half	e_shstrndx;
	} Elf32_Ehdr;
    
    从readelf中读出ELF头文件信息，在信息后开始标注了结构体变量。
	tom@tom-desktop:~/work/kernel-2.6.11-ULK/linux-2.6.11.12/Documentation/study/elf$ readelf -h source/simpleSection
	ELF Header:
	Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00             -------
	Class:                             ELF32                                   |
	Data:                              2's complement, little endian           |-->e_ident
	Version:                           1 (current)                             |
	OS/ABI:                            UNIX - System V                         |
	ABI Version:                       0                                 -------
	
	Type:                              EXEC (Executable file)            --->e_type = 3
	Machine:                           Intel 80386                       --->e_version = 0x1
	Version:                           0x1                               --->e_version = 0x01
	Entry point address:               0x80482b0                         --->e_entry = 0x80482b0
	Start of program headers:          52 (bytes into file)              --->e_phoff = 0x34=52
	Start of section headers:          3340 (bytes into file)            --->e_shoff = 0xD0C=3340
	Flags:                             0x0                               --->e_flags = 0
	Size of this header:               52 (bytes)                        --->e_ehsize=0x34=52
	Size of program headers:           32 (bytes)                        --->e_phentsize=0x20=32
	Number of program headers:         7                                 --->e_phnum=0x7
	Size of section headers:           40 (bytes)                        --->e_shnum=0x28=40
	Number of section headers:         34                                --->e_shnum=0x22=34
	Section header string table index: 31                                --->e_shstrndx=0x1F=31

    说明：
	e_ident[]数组:也叫魔数Magic Number给出ELF一些标识信息
	名称      index  取值     解释
	EI_MAG0    0     0x7f    文件标识，标识是ELF文件
	EI_MAG1    1     'E'
	EI_MAG2    2     'L'
	EI_MAG3    3     'F'
	EI_CLASS   4                1-32位目标 2-64位目标
	EI_DATA    5               处理器数据的编码方式  1--高位在前,2--低位在前。
	EI_VERSION 6               ELF头部的版本号码，必须是EV_CURRENT 
	EI_PAD     7               补齐字节开始处，初始化为0 

	I32调试下面信息:
	7f 45 4c 46 01 01 01 00 00 00 00 00
	可以看出是 32位目标,高位在前，版本号码是CURRENT。
	通过readelf -h hello输出信息为:
	ELF Header:
	Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
	Class:                             ELF32
	Data:                              2's complement, little endian
	Version:                           1 (current)
	OS/ABI:                            UNIX - System V
	ABI Version:                       0

	e_type:
	名称      取值       含义
	ET_NONE   0          未知目标文件格式
	ET_REL    1          可重定位文件
	ET_EXEC   2          可执行文件
	ET_DYN    3          共享目标文件
	ET_CORE   4          core文件
	ET_LOPROC 0xff00     特定处理器文件
	ET_HIPROC 0xffff     特定处理器文件
	ET_LOPROC和ET_HIPROC之间的取值用来标识与处理器相关的文件格式

	e_machine
	名称        取值       含义
	EM_NONE     0          未指定
	EM_M32      1          AT&T WE 32100
	ET_SPARC    2          SPARC
	ET_386      3          Intel 80386

	e_phoff, (32位4字节),program header table的offset
	e_phentsize, program header table中entry的大小。
	e_phnum,program header table表中的入口数目。
    

 2.1 Program Header Table
   ELF可执行文件中有一个专门的数据结构叫程序头表(Program Header Table),用来保存“Segment"的信息。程序表头也是一个结构体数组，定义如下：
   ELF可执行文件被设计得很容易加载到内存，可执行文件的连续的片ELF(chunk)被映射到连续的内存段。程序头部表(Program header table)描述这种关系。
   站在操作系统装载可执行文件的角度看问题，可以发现它实际上并不关心。
   程序头会根据读写执行权限，相同权限的section加载到一起。

   EFL头文件中。
   typedef struct elf32_phdr{
	   Elf32_Word	p_type;
	   Elf32_Off	p_offset;
	   Elf32_Addr	p_vaddr;
	   Elf32_Addr	p_paddr;
	   Elf32_Word	p_filesz;
	   Elf32_Word	p_memsz;
	   Elf32_Word	p_flags;
	   Elf32_Word	p_align;
   } Elf32_Phdr;
  可以通过readelf -l 读出程序头表。
  tom@tom-desktop:~/work/kernel-2.6.11-ULK/linux-2.6.11.12/Documentation/study/elf/source$ readelf -l simpleSection
  Elf file type is EXEC (Executable file)
  Entry point 0x80482b0
  There are 7 program headers, starting at offset 52
  Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  PHDR           0x000034 0x08048034 0x08048034 0x000e0 0x000e0 R E 0x4
  INTERP         0x000114 0x08048114 0x08048114 0x00013 0x00013 R   0x1
  [Requesting program interpreter: /lib/ld-linux.so.2]
  LOAD           0x000000 0x08048000 0x08048000 0x00484 0x00484 R E 0x1000
  LOAD           0x000484 0x08049484 0x08049484 0x0010c 0x00118 RW  0x1000
  DYNAMIC        0x000498 0x08049498 0x08049498 0x000c8 0x000c8 RW  0x4
  NOTE           0x000128 0x08048128 0x08048128 0x00020 0x00020 R   0x4
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4
  Section to Segment mapping:
  Segment Sections...
  00     
  01     .interp 
  02     .interp .note.ABI-tag .hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .text .fini .rodata .eh_frame 
  03     .ctors .dtors .jcr .dynamic .got .got.plt .data .bss 
  04     .dynamic 
  05     .note.ABI-tag 
  06   


    


   



 









1. Segment和Section区别？
   从链接的角度看，ELF文件是按Section存储的；从装载的角度看，ELF文件是按照Segment1. Segment






2. Program Header Table
   ELF可执行文件中有一个专门的数据结构叫程序头表(Program Header Table),用来保存“Segment"的信息。程序表头也是一个结构体数组，定义如下：
   ELF可执行文件被设计得很容易加载到内存，可执行文件的连续的片ELF(chunk)被映射到连续的内存段。程序头部表(Program header table)描述这种关系。

   站在操作系统装载可执行文件的角度看问题，可以发现它实际上并不关心。


   typedef struct elf32_phdr{
	   Elf32_Word	p_type;
	   Elf32_Off	p_offset;
	   Elf32_Addr	p_vaddr;
	   Elf32_Addr	p_paddr;
	   Elf32_Word	p_filesz;
	   Elf32_Word	p_memsz;
	   Elf32_Word	p_flags;
	   Elf32_Word	p_align;
   } Elf32_Phdr;

3. 


参考：
1. 深入理解计算机系统----第7张 链接
2. 深入理解Android JAVA虚拟机ART
3. 
